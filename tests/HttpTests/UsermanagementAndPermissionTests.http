### User Management and Permission Management Tests
### Base URL Configuration
# @no-reject-unauthorized
@baseUrl = https://localhost:5001

### Global Variables 
@accessToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJkZXYuc2FyYWwuZnJvbnRlbmQiLCJpc3MiOiJkZXYuc2FyYWwuYmFja2VuZCIsImV4cCI6MTc1MzMyMTgxOSwic3ViIjoiMDE5ODM5MzMtMDk0YS03ZTlmLTk3MzgtNzU0NzIwZDc0NmViIiwiZW1haWwiOiJhZG1pbkBzYXJhbC5jb20iLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJTeXN0ZW0gQWRtaW5pc3RyYXRvciIsInBlcm1pc3Npb24iOlsiQWRtaW4uVXNlci5NYW5hZ2VtZW50LlJlYWQiLCJBZG1pbi5Sb2xlLk1hbmFnZW1lbnQuRGVsZXRlIiwiQWRtaW4uUm9sZS5NYW5hZ2VtZW50LlVwZGF0ZSIsIkFkbWluLlJvbGUuTWFuYWdlbWVudC5SZWFkIiwiQWRtaW4uU3lzdGVtLkNvbmZpZ3VyYXRpb24uVXBkYXRlIiwiQWRtaW4uVXNlci5NYW5hZ2VtZW50LlVwZGF0ZSIsIlRvZG9zLkRlbGV0ZSIsIkFkbWluLlBlcm1pc3Npb24uTWFuYWdlbWVudC5Bc3NpZ24iLCJBZG1pbi5QZXJtaXNzaW9uLk1hbmFnZW1lbnQuUmV2b2tlIiwiVG9kb3MuQ29tcGxldGUiLCJBZG1pbi5Vc2VyLk1hbmFnZW1lbnQuQ3JlYXRlIiwiVG9kb3MuQ3JlYXRlIiwiVG9kb3MuUmVhZCIsIkFkbWluLlJvbGUuTWFuYWdlbWVudC5DcmVhdGUiLCJBZG1pbi5TeXN0ZW0uQ29uZmlndXJhdGlvbi5SZWFkIiwiVG9kb3MuVXBkYXRlIiwiVXNlcnMuQWNjZXNzIiwiQWRtaW4uVXNlci5NYW5hZ2VtZW50LkRlbGV0ZSIsIkFkbWluLlBlcm1pc3Npb24uTWFuYWdlbWVudC5WaWV3Il0sImlhdCI6MTc1MzMxODIxOSwibmJmIjoxNzUzMzE4MjE5fQ.M4bN4PkLkKECm_BHYd_wisCKLsfZ6D64FvOd1qaBirc
@refreshToken = FoLzgWukweAH+n+3UbCLlQTH0SFM+/Ixg3onh4xwSpi7f1dr7sDBoz7zw3UY8qFDurUGMqtDDJXSjBoftzfvSQ==
@userId = 01983933-094a-7e9f-9738-754720d746eb
@testUserId = 019839ee-2704-7bfe-96cc-1ecd4723595d
@testPermissionKey = Admin.Permission.Management.View
@existingRoleId = 019873b9-4ad7-7537-909e-8aac6fd3b7b0

### ===========================================
### AUTHENTICATION TESTS
### ===========================================

### 1. Login with Admin User
POST {{baseUrl}}/users/login
Content-Type: application/json

{
  "email": "admin@saral.com",
  "password": "Admin123!"
}

###

### 2. Refresh Token Test
POST {{baseUrl}}/users/refresh-token
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "refreshToken": "{{refreshToken}}"
}

###

### ===========================================
### USER MANAGEMENT TESTS
### ===========================================

### 3. Get All Users (New Endpoint)
GET {{baseUrl}}/users
Authorization: Bearer {{accessToken}}

###

### 4. Get User by ID
GET {{baseUrl}}/users/{{userId}}
Authorization: Bearer {{accessToken}}

###

### 5. Register New Test User
POST {{baseUrl}}/users/register
Content-Type: application/json

{
  "email": "testuser@saral.com",
  "firstName": "Test",
  "lastName": "User",
  "password": "TestUser123!"
}


###

### ===========================================
### PERMISSION MANAGEMENT TESTS
### ===========================================

### 6. Get Permission Tree (requires userId parameter)
GET {{baseUrl}}/permissions/tree/{{userId}}
Authorization: Bearer {{accessToken}}

> {%
  client.test("Get permission tree successful", function() {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(Array.isArray(response.body), "Permission tree should be an array");
    client.assert(response.body.length > 0, "Should have permissions");
  });
%}

###

### 7. Get User Direct Permissions (changed from effective to direct)
GET {{baseUrl}}/users/{{testUserId}}/permissions/direct
Authorization: Bearer {{accessToken}}

> {%
  client.test("Get user effective permissions successful", function() {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(Array.isArray(response.body.permissions), "Permissions should be an array");
  });
%}

###

### 8. Get User Direct Permissions (Before Assignment)
GET {{baseUrl}}/users/{{testUserId}}/permissions/direct
Authorization: Bearer {{accessToken}}

> {%
  client.test("Get user direct permissions successful", function() {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(Array.isArray(response.body), "Direct permissions should be an array");
  });
%}

###

### 9. Assign Permission to User
POST {{baseUrl}}/users/{{testUserId}}/permissions
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "permissionKey": "{{testPermissionKey}}"
}

###

### 10. Get User Direct Permissions (After Assignment)
GET {{baseUrl}}/users/{{testUserId}}/permissions/direct
Authorization: Bearer {{accessToken}}


###

### 11. Get User All Permissions (After Assignment) 
GET {{baseUrl}}/users/{{testUserId}}/permissions
Authorization: Bearer {{accessToken}}

###

### 12. Revoke Permission from User
DELETE {{baseUrl}}/users/{{testUserId}}/permissions/{{testPermissionKey}}
Authorization: Bearer {{accessToken}}

###

### 13. Verify Permission Revocation
GET {{baseUrl}}/users/{{testUserId}}/permissions/direct
Authorization: Bearer {{accessToken}}


###

### ===========================================
### ROLE MANAGEMENT TESTS
### ===========================================

### 14. Get All Roles (With Assertions)
GET {{baseUrl}}/roles
Authorization: Bearer {{accessToken}}

> {%
  client.test("Get all roles successful", function () {
    client.assert(response.status === 200, "Status code should be 200");
    client.assert(Array.isArray(response.body), "Response should be an array");
    client.assert(response.body.length > 0, "At least one role should exist");

    const role = response.body[0];
    client.assert(role.hasOwnProperty("id"), "Role should contain 'id'");
    client.assert(role.hasOwnProperty("name"), "Role should contain 'name'");
    client.assert(role.hasOwnProperty("description"), "Role should contain 'description'");
    client.assert(role.hasOwnProperty("isSystemRole"), "Role should contain 'isSystemRole'");
    client.assert(role.hasOwnProperty("createdAt"), "Role should contain 'createdAt'");
    client.assert(role.hasOwnProperty("permissionCount"), "Role should contain 'permissionCount'");
    client.assert(role.hasOwnProperty("permissions"), "Role should contain 'permissions'");
    client.assert(Array.isArray(role.permissions), "Permissions should be an array");
  });
%}


###

### 15. Create New Test Role
POST {{baseUrl}}/roles
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "name": "TestRole",
  "description": "Test role for HTTP testing",
  "permissionKeys": [
    "Todos.Read",
    "Todos.Create"
  ]
}

###

@testRoleId = 019839f0-8628-7c96-a705-6d4730674b21
### 16. Get Role by ID
GET {{baseUrl}}/roles/{{testRoleId}}
Authorization: Bearer {{accessToken}}

> {%
  client.test("Get role by ID successful", function() {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(response.body.id, "Role ID not found");
    client.assert(response.body.name === "TestRole", "Role name mismatch");
  });
%}

###

### 17. Assign Role to User
POST {{baseUrl}}/users/{{testUserId}}/roles
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "roleId": "{{testRoleId}}"
}

###

### 18. Remove Role from User
DELETE {{baseUrl}}/users/{{testUserId}}/roles/{{testRoleId}}
Authorization: Bearer {{accessToken}}

###

### ===========================================
### ERROR HANDLING TESTS
### ===========================================

### 19. Test Unauthorized Access (No Token)
GET {{baseUrl}}/users


###

### 20. Test Invalid Permission Assignment
POST {{baseUrl}}/users/{{testUserId}}/permissions
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "permissionKey": "Invalid.Permission.Key"
}

###

### 21. Test Invalid User ID
GET {{baseUrl}}/users/00000000-0000-0000-0000-000000000000
Authorization: Bearer {{accessToken}}

###

### ===========================================
### CLEANUP (Optional)
### ===========================================

### 22. Login with Test User (if created successfully)
 POST {{baseUrl}}/users/login
Content-Type: application/json
 
{
   "email": "testuser@saral.com",
   "password": "TestUser123!"
 }

###

### 23. Get Permission Template
GET {{baseUrl}}/permissions/template
Authorization: Bearer {{accessToken}}

> {%
  client.test("Get permission template successful", function () {
    client.assert(response.status === 200, "Expected status code 200");
    client.assert(Array.isArray(response.body), "Permission template should be an array");
    client.assert(response.body.length > 0, "There should be at least one permission defined");

    const permission = response.body[0];
    client.assert(permission.hasOwnProperty("key"), "Permission should have a 'key'");
    client.assert(permission.hasOwnProperty("name"), "Permission should have a 'name'");
    client.assert(permission.hasOwnProperty("description"), "Permission should have a 'description'");
    client.assert(permission.hasOwnProperty("category"), "Permission should have a 'category'");
  });
%}

### 24. Edit Role
PUT {{baseUrl}}/roles
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "roleId": "{{existingRoleId}}",
  "name": "UpdatedTestRoleName",
  "description": "Updated description for testing",
  "permissionKeys": ["Admin.Dashboard.Read", "Admin.UserManagement.Read"]
}

> {%
  client.test("Edit role successful", function () {
    client.assert(response.status === 201, "Expected 201 Created");
    client.assert(!!response.headers["location"], "Location header should be present");
    client.assert(!!response.body, "Response body should not be empty");
  });
%}

### 25. Delete Role
DELETE {{baseUrl}}/roles/{{existingRoleId}}
Authorization: Bearer {{accessToken}}
Content-Type: application/json

> {%
  client.test("Delete role successful", function () {
    client.assert(response.status === 200, "Expected 200 OK");
    client.assert(response.body === "Role Deleted successfully", "Unexpected success message");
  });
%}


### End of Tests
